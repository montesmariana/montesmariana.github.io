groupcluster3 %>% select(semcor_names, cluster) %>% mutate(cluster = factor(cluster)) %>% mutate(cluster = fct_recode(cluster, mostly_fiction = "1", mostly_nonfiction = "2", mostly_press = "3")) %>% write_csv("C:/Users/u0118974/Box Sync/church and rest/Brown_raw/three_semcor_clusters.csv")
github <- "C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/"
fname <- paste0(github, "church.tsv")
clouds <- read_tsv(fname)
nrow(clouds)
clouds %>% distinct() %>% nrow()
colnames(stress)
colnames(clouds)
tail(colnames(clouds))
length(colnames(clouds)[!endsWith(colnames(clouds), ".x")])
length(colnames(clouds))
length(colnames(clouds)[!endsWith(colnames(clouds), ".x")|!endsWith(colnames(clouds), ".y")])
length(colnames(clouds)[!endsWith(colnames(clouds), ".x")&!endsWith(colnames(clouds), ".y")])
colnames(clouds)[!endsWith(colnames(clouds), ".x")&!endsWith(colnames(clouds), ".y")]
fname <- paste0(github, "church.models.tsv")
models <- read_tsv(fname)
nrow(models)
models %>% distinct() %>% nnrow()
models %>% distinct() %>% nrow()
models %>% select(-stress) %>% distinct() %>% nrow()
n_distinct(models$model)
models %>% mutate(idx = seq.int(1, nrow(models)))
models %>% mutate(idx = seq.int(1, nrow(models)))
models %>% filter(register == 'all') %>% count(tokens)
models %>% count(register)
models %>% count(compounds)
models <- read_tsv(fname)
models %>% count(register)
nrow(models)
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/DepsNCues/cw_clouds/TypeClouds')
groupcluster3
groupcluster3 %>% count(register, cluster) %>% spread(key = register, value = n, fill = 0)
groupcluster3 %>% count(pressficnon, cluster) %>% spread(key = pressficnon, value = n, fill = 0)
groupcluster3 %>% count(imaginfo, cluster) %>% spread(key = imaginfo, value = n, fill = 0)
groupcluster3 %>% count(register, cluster) %>% spread(key = cluster, value = n, fill = 0)
groupcluster3 %>% count(category_name, cluster) %>% spread(key = cluster, value = n, fill = 0)
runApp('C:/Users/u0118974/Box Sync/church and rest/DepsNCues/cw_clouds/TypeClouds')
tokens_info
tokens_info %>% filter(cluster == '1')
tokens_info %>% filter(cluster == '1' & compound_status=='simply_church') %>% count(supersense, category_name) %>% spread(key = supersense, value = n, fill = 0)
tokens_info %>% filter(cluster == '2' & compound_status=='simply_church') %>% count(supersense, category_name) %>% spread(key = supersense, value = n, fill = 0)
tokens_info %>% filter(cluster == '3' & compound_status=='simply_church') %>% count(supersense, category_name) %>% spread(key = supersense, value = n, fill = 0)
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
install.packages("misc3d")
clouds
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
subcloud
clouds <- read_tsv("church.clouds.tsv")
library(shiny)
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
clouds
#clouds <- read_tsv("church.tsv")
# models <- read_tsv("church.models.tsv")
#clouds <- read_tsv("old.favorite.cloud.tsv")
clouds <- read_tsv("favorite.cloud.tsv")
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
dist <- "nocomp.10_10_nvj_nobound.noweight.1.s.5k_all.5_5.ttmx.dist.pac"
temp <- unzip(dist, unzip="internal")
tokvecs <- npyLoad(temp[2])
metadata <- fromJSON(file = temp[1])
dimid2item <- metadata$'row_items'
dimnames(tokvecs) <- list(dimid2item, dimid2item)
file.remove(temp[1], temp[2])
hc <- hclust(dist(tokvecs), method = "average")
ddata <- dendro_data(as.dendrogram(hc))
library(shiny); library(shinythemes)
library(readr); library(dplyr); library(purrr); library(forcats)
library(ggplot2); library(plotly); library(misc3d)
library(RcppCNPy); library(rjson)
library(ggdendro)
#clouds <- read_tsv("church.tsv")
# models <- read_tsv("church.models.tsv")
#clouds <- read_tsv("old.favorite.cloud.tsv")
clouds <- read_tsv("new.favorite.cloud.tsv")
legendmap <- read_tsv("legendmap.tsv")
dist <- "nocomp.10_10_nvj_nobound.noweight.1.s.5k_all.5_5.ttmx.dist.pac"
temp <- unzip(dist, unzip="internal")
tokvecs <- npyLoad(temp[2])
metadata <- fromJSON(file = temp[1])
dimid2item <- metadata$'row_items'
dimnames(tokvecs) <- list(dimid2item, dimid2item)
file.remove(temp[1], temp[2])
R.version
install.packages('zipfR')
library(tidyverse)
## Working directory should be the dir with isoMDS solutions
setwd("Aug01/")
models <- read_tsv("church.models.tsv")
install.packages("prettydoc")
install.packages('Rtools')
install.packages("academicWriteR")
136346252+38502695+339939315+151988593+167200192
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
tibble("code" = c("mytype_1", "mytype_2", "mytype_3", "mytype_4"),
"definition" = c("een goed uitleg", "een betekenisbeschrijving", "wat voor een woord dit is", "de eerste deel"))
library(tibble)
tibble("code" = c("mytype_1", "mytype_2", "mytype_3", "mytype_4"),
"definition" = c("een goed uitleg", "een betekenisbeschrijving", "wat voor een woord dit is", "de eerste deel"))
tibble("code" = c("mytype_1", "mytype_2", "mytype_3", "mytype_4"),
"definition" = c("een goed uitleg", "een betekenisbeschrijving", "wat voor een woord dit is", "de eerste deel"),
"example" = c("dit is goed uitgelegd", "het voorbeeld", "hoe het woord gebruikt kan worden", "de tweede deel"))
tibble("code" = c("mytype_1", "mytype_2", "mytype_3", "mytype_4"),
"definition" = c("een goed uitleg", "een betekenisbeschrijving", "wat voor een woord dit is", "de eerste deel"),
"example" = c("dit is goed uitgelegd", "het voorbeeld", "hoe het woord gebruikt kan worden", "de tweede deel")) %>%
kable()
tibble(
` ` = c("token_id_1", "token_id_2")
)
tibble(
` ` = c("token_id_1", "token_id_2"),
"sense" = c("one_sense_tag", "geen"),
"cues" = c('["a_cue"]', '["none"]'),
"confidence"  = c("number", "number"),
"comments" = c(NA, "mycomment")
)
tibble(
` ` = c("token_id_1", "token_id_2"),
"sense" = c("one_sense_tag", "geen"),
"cues" = c('["a_cue"]', '["none"]'),
"confidence"  = c("number", "number"),
"comments" = c(NA, "mycomment")
) %>%
kable("latex", booktabs = T) %>%
kable_styling(position = "center")
library(knitr)
library(knitr)
knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage{xcolor}', x, fixed = TRUE)})
library(kableExtra)
library(tibble)
library(knitr)
knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage{xcolor}', x, fixed = TRUE)})
library(kableExtra)
library(tibble)
library(jsonlite)
ann <- fromJSON("../ValentijnProvÃ©.json")
ann
str(ann)
class(ann)
glimpse(ann)
as_tibble(ann)
as_tibble(ann$church)
as_tibble(ann$church, validate=F)
str(ann$church)
as.data.frame(ann$church)
library(tidyverse)
map(ann$church, as.data.frame)
map(ann$church, as_tibble)
as_tibble(ann$church)
map(ann$church, length)
map_if(ann$church, length == 3, length)
map_if(ann$church, function(x) length(x) ==3, length)
map_if(ann$church, function(x) length(x) ==3, function(x) x$comments = NA)
map_if(ann$church, function(x) length(x) ==3, function(x) x=list(x$sense, x$confidence, x$cues, x$comments=NA)
map_if(ann$church, function(x) length(x) ==3, function(x) x = list(x$sense, x$confidence, x$cues, x$comments=NA))
map_if(ann$church, function(x) length(x) ==3, function(x) list(x$sense, x$confidence, x$cues, x$comments=NA))
map_if(ann$church, function(x) length(x) ==3, function(x) list(x$sense, x$confidence, x$cues, x$comments))
as_tibble(map_if(ann$church, function(x) length(x) ==3, function(x) list(x$sense, x$confidence, x$cues, x$comments)))
(map_if(ann$church, function(x) length(x) ==3, function(x) list(x$sense, x$confidence, x$cues, x$comments)))
map((map_if(ann$church, function(x) length(x) ==3, function(x) list(x$sense, x$confidence, x$cues, x$comments))), as_tibble)
length((map_if(ann$church, function(x) length(x) ==3, function(x) list(x$sense, x$confidence, x$cues, x$comments))))
ann
names(ann)
ann2 <- list(); i <- 1
n = 'church'
ann$n
ann[n]
names(ann[n])
names(ann[[n]])
y = names(ann[[n]])[[1]]
y
lenght(ann[[n]][[y]])
length(ann[[n]][[y]])
t = ann[[n]]
length(t[[y]])
t[[y]]$comments
t[[y]]$cues
paste(t[[y]]$cues)
length(t[[y]]$cues)
length(paste(t[[y]]$cues))
length(paste(t[[y]]$cues), collapse=', ')
length(paste(t[[y]]$cues, collapse=', '))
ann2 <- list(); i <- 1
for (name in names(ann)) {
if (!name == "user") {
this_type = ann[[n]]
for (token in names(this_type)) {
if (length(this_type[[token]]) == 3) {
comment = NA
} else {
comment = this_type[[token]]$comments
}
ann2[[i]] <- c(
"type" = name,
"token_id" = token,
"sense" = this_type[[token]]$sense,
"confidence" = this_type[[token]]$confidence,
"cues" = paste(this_type[[token]]$cues,
collapse = ', '),
"comments" = comment
)
i <- i+1
}
}
}
ann_2
ann2
as_tibble(ann2)
str(ann2)
ann2 <- list("type" = "",
"token_id" = "",
"sense" = "",
"confidence" = "",
"cues" = "",
"comments" = ""); i <- 1
ann2
str(ann2)
ann2[['type']]
ann2 <- list("type" = list(),
"token_id" = list(),
"sense" = list(),
"confidence" = list(),
"cues" = list(),
"comments" = list()); i <- 1
ann2 <- tibble()
for (name in names(ann)) {
if (!name == "user") {
this_type = ann[[n]]
for (token in names(this_type)) {
if (length(this_type[[token]]) == 3) {
comment = NA
} else {
comment = this_type[[token]]$comments
}
add_row(ann2,
type = name,
token_id = token,
sense = this_type[[token]]$sense,
confidence = this_type[[token]]$confidence,
cues = paste(this_type[[token]]$cues,
collapse = ', '),
comments = comment
)
}
}
}
ann2 <- tibble()
ann2
colnames(ann2) <- c('type', 'token_id', 'sense', 'confidence', 'cues', 'comments')
ann2 <- tibble(type = NULL, token_id = NULL, sense = NULL, confidence = NULL, cues = NULL, comments = NULL)
ann2 <- tibble(type = character(), token_id = character(), sense = character(), confidence = character(), cues = character(), comments = character())
ann2
ann2 <- tibble(type = character(), token_id = character(), sense = character(), confidence = character(), cues = character(), comments = character())
for (name in names(ann)) {
if (!name == "user") {
this_type = ann[[n]]
for (token in names(this_type)) {
if (length(this_type[[token]]) == 3) {
comment = NA
} else {
comment = this_type[[token]]$comments
}
add_row(ann2,
type = name,
token_id = token,
sense = this_type[[token]]$sense,
confidence = this_type[[token]]$confidence,
cues = paste(this_type[[token]]$cues,
collapse = ', '),
comments = comment
)
}
}
}
ann2
ann2 %>% add_row(type = 'a', token_id = 'b', cues = 'c', comments = 'd', sense = 'x')
ann2
ann2 <- tibble(type = character(), token_id = character(), sense = character(), confidence = character(), cues = character(), comments = character())
for (name in names(ann)) {
if (!name == "user") {
this_type = ann[[n]]
for (token in names(this_type)) {
if (length(this_type[[token]]) == 3) {
comment = NA
} else {
comment = this_type[[token]]$comments
}
ann2 <- add_row(ann2,
type = name,
token_id = token,
sense = this_type[[token]]$sense,
confidence = this_type[[token]]$confidence,
cues = paste(this_type[[token]]$cues,
collapse = ', '),
comments = comment
)
}
}
}
ann2
ann2 <- tibble(type = character(), token_id = character(), sense = character(), confidence = character(), cues = character(), comments = character())
for (name in names(ann)) {
if (!name == "user") {
this_type = ann[[name]]
for (token in names(this_type)) {
if (length(this_type[[token]]) == 3) {
comment = NA
} else {
comment = this_type[[token]]$comments
}
ann2 <- add_row(ann2,
type = name,
token_id = token,
sense = this_type[[token]]$sense,
confidence = this_type[[token]]$confidence,
cues = paste(this_type[[token]]$cues,
collapse = ', '),
comments = comment
)
}
}
}
ann2
df <- ann %>% filter(type == 'church') %>% select(-type)
df <- ann2 %>% filter(type == 'church') %>% select(-type)
df
nrow(df)
right_length <- nrow(df) == 5
length(ann2$comments)
nrow(filter(ann2, !is.na(sense)))
nrow(filter(ann2, !is.na(comments)))
all_tags <- ann2 %>% filter(!is.na(sense), !is.na(confidence), !is.na(cues))
all_tags
all_tags <- ann2 %>% filter(!is.na(sense), !is.na(confidence), !is.na(cues)) %>% nrow()
all_tags
nrow(filter(ann2, !is.na(sense), !is.na(confidence), !is.na(cues)))
nrow(filter(ann2, sense == 'geen'))
nrow(filter(ann2, sense %in% c('geen', 'none')))
nrow(filter(ann2, sense %in% c('geen', 'none')), is.na(comments))
nrow(filter(ann2, sense %in% c('geen', 'none'), is.na(comments)))
users <- fromJSON("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/Annotation/users.json")
users
names(users)
str(users)
class(users)
length(users)
tibble(users)
tibble(list(users))
unnest(tibble(list(users)))
as_tibble(users)
class(users$tokens)
users1 <- map_if(users, is.data.frame, list)
as_tibble(users1)
as_tibble(users1) %>% unnest()
as_tibble(users1) %>% unnest() %>% filter(name == 'mariana.montes') %>% select(tokens)
as_tibble(users1) %>% unnest() %>% filter(name == 'mariana.montes')
as_tibble(users1) %>% filter(name == 'mariana.montes')
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens)
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens) %>% as_tibble()
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens) %>% [[1]]
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens)
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens) %>% unlist
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens) %>% unlist %>% as_tibble
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens)
as_tibble(users1) %>% filter(name == 'mariana.montes') %>% select(tokens) %>% unnest()
length(users)
as_tibble(users)
as_tibble(users) %>% filter(name == mariana.montes)
as_tibble(users) %>% filter(name == 'mariana.montes')
which(users$name == 'mariana.montes')
users$tokens[which(users$name == 'mariana.montes')]
length(users$tokens[which(users$name == 'mariana.montes')])
class(users$tokens[which(users$name == 'mariana.montes')])
tibble(users$tokens[which(users$name == 'mariana.montes')])
map(users$tokens, [[which(users$name == 'mariana.montes')]])
map(users$tokens, [which(users$name == 'mariana.montes')])
map(users$tokens, function(x) x[[1]])
map_f(users$tokens, function(x) x[[1]] != NULL, function(x) x[[1]])
map_if(users$tokens, function(x) x[[1]] != NULL, function(x) x[[1]])
map_if(users$tokens, function(x) length(x[[1]]) > 1, function(x) x[[1]])
map_if(users$tokens, function(x) length(x[[1]]) > 1, function(x) x[1])
map_if(users$tokens, function(x) length(x[[1]]) > 1, function(x) x[[1]][[1]])
map_if(users$tokens, function(x) !(length(x[[1]]) == 1), function(x) x[[1]])
map(users$tokens, function(x) length(x[[1]]))
map(users$tokens, function(x) length(x[[1]][1]))
map(users$tokens, function(x) length(x[[1]][[1]]))
map(users$tokens, function(x) length(x[[1]]) > 0)
names(users$tokens)
names(users$tokens[length(users$tokens[[1]]) > 0])
names(users$tokens[map(users$tokens, function(x) length(x[[1]]) >0)])
length(users$tokens)
length(users$tokens[length(users$tokens[[1]]) > 0])
map(users$tokens, function(x) length(x[[1]]) > 0)
class(map(users$tokens, function(x) length(x[[1]]) > 0))
class(users$tokens)
class(names(users$tokens))
list(names(users$tokens))
subset <- map(users$tokens, function(x) length(x[[1]]) > 0)
list(names(users$tokens))[subset]
length(users$tokens['gemiddeld'][[1]])
length(users$tokens['gemiddeld'][[2]])
length(users$tokens['gemiddeld'])
length(users$tokens['gemiddeld'][[1]][[1]])
length(users$tokens['gemiddeld'][[1]][[3]])
list.condition <- sapply(names(users$tokens), function(x) x=='harden')
names(users$tokens)[list.condition]
list.condition <- sapply(names(users$tokens), function(x) users$tokens[x][[1]][[1]] > 0)
names(users$tokens)[list.condition]
names(users$tokens)
as.list(names(users$tokens))
as.list(names(users$tokens))[list.condition]
list.condition
list.condition <- sapply(names(users$tokens), function(x) length(users$tokens[x][[1]][[1]]) > 0)
list.condition
as.list(names(users$tokens))[list.condition]
(names(users$tokens))[list.condition]
names(users$tokens)[list.condition]
names(users)
names(users['name'])
names(users[['name']])
users['name']
'mariana.montes' %in% users['name']
users['name'][1]
users['name'][[1]]
'mariana.montes' in users['name'][[1]]
'mariana.montes' %in% users['name'][[1]]
which(users['name'][[1]] == 'mariana.montes')
which(users['name'][[1]] == 'nienke.baens')
list.condition <- sapply(names(users$tokens), function(x) length(users$tokens[x][[1]][[1]]) > 0)
as.list(names(users$tokens))[list.condition]
(names(users$tokens))[list.condition]
ann
names(ann)
names(ann)[names(ann) != 'user']
x <- names(ann)
y <- names(ann)[names(ann) != 'user']
length(y[y%in% x])
length(y[! y%in% x])
paste0('a ', 'b', 'c')
library(jsonlite)
definitions <- fromJSON(filename)
filename <- "C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/Annotation/definitions.json"
definitions <- fromJSON(filename)
definitions
names(definitions)
source <- fromJSON(filename)
tibble(lemma = names(source),
code = map_chr(names(source), function(x) {return(source[[x]]$code)}))
library(tidyverse)
tibble(lemma = names(source),
code = map_chr(names(source), function(x) {return(source[[x]]$code)}))
names(source)
x <- names(source)[1]
x
source[[x]]
source[[x]]$code
extract_type <- function(source, type) {
return(tibble(lemma = type,
code = source[[type]]$code))
}
extract_type(source, 'gemiddeld')
extract_type <- function(source, type) {
return(tibble(lemma = type,
code = source[[type]]$code,
definition = source[[type]]$definition,
example = source[[type]]$example))
}
extract_type(source, 'gemiddeld')
bind_rows(map(names(source)), ~extract_type(source, .))
bind_rows(map(names(source), ~extract_type(source, .))
bind_rows(map(names(source), ~extract_type(source, .)))
extract_type <- function(type, source) {
return(tibble(lemma = type,
code = source[[type]]$code,
definition = source[[type]]$definition,
example = source[[type]]$example))
}
bind_rows(map(names(source), ~extract_type(., source=source)))
definitions <- bind_rows(map(names(source), ~extract_type(., source=source)))
clouds <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/NephoVis/zwart/zwart.tsv")
library(tidyverse)
clouds <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/NephoVis/zwart/zwart.tsv")
clouds %>% count(confidence.julieartem)
clouds %>% count(confidence.woordenschatjes)
clouds %>% filter(is.na(confidence.woordenschatjes))
clouds %>% filter(is.na(confidence.woordenschatjes)) %>% pull(sense.woordenschatjes)
clouds %>% filter(is.na(confidence.woordenschatjes)) %>% pull(`_id`)
clouds %>% filter(confidence.woordenschatjes == 5, confidence.julieartem == 5)
clouds %>% filter(confidence.woordenschatjes == 5, confidence.julieartem == 5) %>% nrow
clouds %>% filter(is.na(confidence.woordenschatjes)) %>% pull(sense.woordenschatjes)
clouds[is.na(clouds$confidence.woordenschatjes), 'confidence.woordenschatjes']
clouds[is.na(clouds$confidence.woordenschatjes), 'confidence.woordenschatjes'] <- 3
clouds %>% filter(is.na(confidence.woordenschatjes)) %>% pull(sense.woordenschatjes)
clouds %>% write_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/NephoVis/zwart/zwart.tsv")
z <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/NephoVis/zwart/zwart.tsv")
library(tidyverse)
clouds %>% write_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/NephoVis/zwart/zwart.tsv")
z <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/NephoVis/zwart/zwart.tsv")
z %>% filter(`_id` == 'zwart/adj/parool_20020928_134/796')
z %>% filter(`_id` == 'zwart/adj/parool_20020928_134/796') %>% select('sense.woordenschatjes')
setwd("C:/Users/u0118974/xampp/htdocs/GitHub/montesmariana.github.io/NephoVis/zwart/")
library(tidyverse)
z <- read_tsv("zwart.tsv")
