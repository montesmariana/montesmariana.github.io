groupcluster3 <- tibble(files = names(groups3), group = groups3) %>%
separate(files, into = c("register", "file")) %>%
mutate(brown_names = str_c(file, ".txt")) %>%
rename(imaginfo = register) %>%
left_join(my_files, by = c("brown_names", "imaginfo"))
p3 <- ggplot(groupcluster3) +
geom_bar(aes(group, fill = register)) +
labs(caption = paste0("Model information: ", s_description))
p3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(group, fill = imaginfo)) +
labs(caption = paste0("Model information: ", s_description))
p3
groupcluster3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(group, fill = pressficnon)) +
labs(caption = paste0("Model information: ", s_description))
p3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(group, fill = category_name)) +
labs(caption = paste0("Model information: ", s_description))
p3
s <- s8; cull = 10; ngs = 2
s_description <- str_glue("analysis from `stylo` with culling of {cull},
ngram size {1}")
# creates clusters
hc <- hclust(as.dist(s$distance.table), method = "ward.D2")
# groups from clusters
groups <- cutree(hc, k=2)
groupscluster <- tibble(files = names(groups), group = groups) %>%
mutate(register = str_replace_all(files, "([a-z]+)_.*", "\\1")) %>%
mutate(filename = str_replace_all(files, "[a-z]+_([A-Z][0-9][0-9])", "\\1.txt"))
p <- ggplot(groupscluster) +
geom_bar(aes(group, fill = register)) +
labs(caption = paste0("Model information: ", s_description))
## ggplot dendogram
ddata <- dendro_data(as.dendrogram(hc), type = "rectangle")
d <- ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label, color = str_replace_all(label, "([a-z]+)_.*", "\\1"))) +
coord_flip() +
labs(color = 'Register',
caption = paste0("Model information: ", s_description)) +
theme_dendro()
d
p
info_in_imag <- groupscluster %>%
filter(group == 1 & register == 'info') %>% pull(filename)
imag_in_info <- groupscluster %>%
filter(group == 2 & register == 'imag') %>% pull(filename)
my_files %>%
filter(brown_names %in% info_in_imag) %>%
select(-semcor_names, -imaginfo, -register, -in_semcor) %>%
kable(caption = capthis("Table of informative files in the imaginative cluster")) %>%
kable_styling(full_width = F) %>%
scroll_box(height = "400px")
groups3 <- cutree(hc, k=3)
groupcluster3 <- tibble(files = names(groups3), group = groups3) %>%
separate(files, into = c("register", "file")) %>%
mutate(brown_names = str_c(file, ".txt")) %>%
rename(imaginfo = register) %>%
left_join(my_files, by = c("brown_names", "imaginfo"))
p3 <- ggplot(groupcluster3) +
geom_bar(aes(group, fill = category_name)) +
labs(caption = paste0("Model information: ", s_description))
p3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(group, fill = has_simply_church)) +
labs(caption = paste0("Model information: ", s_description))
p3
groupcluster3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(group, fill = has_simple_church)) +
labs(caption = paste0("Model information: ", s_description))
p3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(has_simple_church, fill = group)) +
labs(caption = paste0("Model information: ", s_description))
p3
groupcluster3
groupcluster3 <- tibble(files = names(groups3), group = groups3) %>%
separate(files, into = c("register", "file")) %>%
mutate(brown_names = str_c(file, ".txt")) %>%
rename(imaginfo = register, cluster = group) %>%
left_join(my_files, by = c("brown_names", "imaginfo"))
p3 <- ggplot(groupcluster3) +
geom_bar(aes(has_simple_church, fill = cluster)) +
labs(caption = paste0("Model information: ", s_description))
p3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(cluster, fill = has_simple_church)) +
labs(caption = paste0("Model information: ", s_description))
p3
tokens_info <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/church_tokens.tsv")
tokens_info <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/church_tokens.tsv") %>%
mutate(brown_names = str_to_upper(str_replace_all(`_id`, "^church/N/br-([a-z][0-9][0-9])/.*$", "\\2.txt")))
tokens_info <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/church_tokens.tsv") %>%
mutate(brown_names = str_replace_all(`_id`, "^church/N/br-([a-z][0-9][0-9])/.*$", "\\2.txt"))
tokens_info <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/church_tokens.tsv") %>%
mutate(brown_names = str_replace_all(`_id`, "^church/N/br-([a-z][0-9][0-9])/.*$", "\\1.txt"))
tokens_info
tokens_info <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/church_tokens.tsv") %>%
mutate(brown_names = str_to_upper(str_replace_all(`_id`, "^church/N/br-([a-z][0-9][0-9])/.*$", "\\1.txt")))
tokens_info %>% count(brown_names)
tokens_info %>%
select(token_id, sense, supersense, brown_names, compound_status) %>%
left_join(groupcluster3, by = brown_names)
tokens_info %>%
select(`_id`, sense, supersense, brown_names, compound_status) %>%
left_join(groupcluster3, by = brown_names)
tokens_info %>%
select(`_id`, sense, supersense, brown_names, compound_status) %>%
left_join(groupcluster3, by = 'brown_names')
tokens_info <- tokens_info %>%
select(`_id`, sense, supersense, brown_names, compound_status) %>%
left_join(groupcluster3, by = 'brown_names')
ggplot(tokens_info) +
geom_bar(aes(cluster, sense))
ggplot(tokens_info) +
geom_bar(aes(cluster, fill=sense))
tokens_info
groupcluster3
tokens_info
groupcluster3$brown_names[groupcluster3$brown_names %in% tokens_info$brown_names]
tokens_info <- read_tsv("C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/church_tokens.tsv") %>%
mutate(brown_names = str_to_upper(str_replace_all(`_id`, "^church/N/br-([a-z][0-9][0-9])/.*$", "\\1"))) %>%
mutate(brown_names = str_c(brown_names, ".txt"))
tokens_info <- tokens_info %>%
select(`_id`, sense, supersense, brown_names, compound_status) %>%
left_join(groupcluster3, by = 'brown_names')
tokens_info
ggplot(tokens_info) +
geom_bar(aes(cluster, fill=sense))
ggplot(tokens_info) +
geom_bar(aes(cluster, fill=supersense))
ggplot(tokens_info) +
geom_bar(imaginfo, fill = supersense)
ggplot(tokens_info) +
geom_bar(aes(imaginfo, fill=supersense))
ggplot(tokens_info) +
geom_bar(aes(cluster, fill=supersense))
groupcluster3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(cluster, fill = pressficnon)) +
labs(caption = paste0("Model information: ", s_description))
p3
p3 <- ggplot(groupcluster3) +
geom_bar(aes(cluster, fill = category_name)) +
labs(caption = paste0("Model information: ", s_description))
p3
groupcluster3 %>% select(semcor_names, cluster)
groupcluster3 %>% select(semcor_names, cluster) %>% mutate(cluster = fct_recode(cluster, mostly_fiction = 1))
groupcluster3 %>% select(semcor_names, cluster) %>% mutate(cluster = factor(cluster)) %>% mutate(cluster = fct_recode(cluster, mostly_fiction = "1"))
p3 <- ggplot(groupcluster3) +
geom_bar(aes(cluster, fill = pressficnon)) +
labs(caption = paste0("Model information: ", s_description))
p3
groupcluster3 %>% select(semcor_names, cluster) %>% mutate(cluster = factor(cluster)) %>% mutate(cluster = fct_recode(cluster, mostly_fiction = "1", mostly_nonfiction = "2", mostly_press = "3"))
groupcluster3 %>% select(semcor_names, cluster) %>% mutate(cluster = factor(cluster)) %>% mutate(cluster = fct_recode(cluster, mostly_fiction = "1", mostly_nonfiction = "2", mostly_press = "3")) %>% count(cluster)
groupcluster3 %>% select(semcor_names, cluster) %>% mutate(cluster = factor(cluster)) %>% mutate(cluster = fct_recode(cluster, mostly_fiction = "1", mostly_nonfiction = "2", mostly_press = "3")) %>% write_csv("C:/Users/u0118974/Box Sync/church and rest/Brown_raw/three_semcor_clusters.csv")
github <- "C:/Users/u0118974/xampp/htdocs/GitHub/delhikiev.github.io/"
fname <- paste0(github, "church.tsv")
clouds <- read_tsv(fname)
nrow(clouds)
clouds %>% distinct() %>% nrow()
colnames(stress)
colnames(clouds)
tail(colnames(clouds))
length(colnames(clouds)[!endsWith(colnames(clouds), ".x")])
length(colnames(clouds))
length(colnames(clouds)[!endsWith(colnames(clouds), ".x")|!endsWith(colnames(clouds), ".y")])
length(colnames(clouds)[!endsWith(colnames(clouds), ".x")&!endsWith(colnames(clouds), ".y")])
colnames(clouds)[!endsWith(colnames(clouds), ".x")&!endsWith(colnames(clouds), ".y")]
fname <- paste0(github, "church.models.tsv")
models <- read_tsv(fname)
nrow(models)
models %>% distinct() %>% nnrow()
models %>% distinct() %>% nrow()
models %>% select(-stress) %>% distinct() %>% nrow()
n_distinct(models$model)
models %>% mutate(idx = seq.int(1, nrow(models)))
models %>% mutate(idx = seq.int(1, nrow(models)))
models %>% filter(register == 'all') %>% count(tokens)
models %>% count(register)
models %>% count(compounds)
models <- read_tsv(fname)
models %>% count(register)
nrow(models)
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/DepsNCues/cw_clouds/TypeClouds')
groupcluster3
groupcluster3 %>% count(register, cluster) %>% spread(key = register, value = n, fill = 0)
groupcluster3 %>% count(pressficnon, cluster) %>% spread(key = pressficnon, value = n, fill = 0)
groupcluster3 %>% count(imaginfo, cluster) %>% spread(key = imaginfo, value = n, fill = 0)
groupcluster3 %>% count(register, cluster) %>% spread(key = cluster, value = n, fill = 0)
groupcluster3 %>% count(category_name, cluster) %>% spread(key = cluster, value = n, fill = 0)
runApp('C:/Users/u0118974/Box Sync/church and rest/DepsNCues/cw_clouds/TypeClouds')
tokens_info
tokens_info %>% filter(cluster == '1')
tokens_info %>% filter(cluster == '1' & compound_status=='simply_church') %>% count(supersense, category_name) %>% spread(key = supersense, value = n, fill = 0)
tokens_info %>% filter(cluster == '2' & compound_status=='simply_church') %>% count(supersense, category_name) %>% spread(key = supersense, value = n, fill = 0)
tokens_info %>% filter(cluster == '3' & compound_status=='simply_church') %>% count(supersense, category_name) %>% spread(key = supersense, value = n, fill = 0)
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
install.packages("misc3d")
clouds
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
subcloud
clouds <- read_tsv("church.clouds.tsv")
library(shiny)
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Desktop')
runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
clouds
#clouds <- read_tsv("church.tsv")
# models <- read_tsv("church.models.tsv")
#clouds <- read_tsv("old.favorite.cloud.tsv")
clouds <- read_tsv("favorite.cloud.tsv")
shiny::runApp('C:/Users/u0118974/Box Sync/church and rest/3Dclouds')
dist <- "nocomp.10_10_nvj_nobound.noweight.1.s.5k_all.5_5.ttmx.dist.pac"
temp <- unzip(dist, unzip="internal")
tokvecs <- npyLoad(temp[2])
metadata <- fromJSON(file = temp[1])
dimid2item <- metadata$'row_items'
dimnames(tokvecs) <- list(dimid2item, dimid2item)
file.remove(temp[1], temp[2])
hc <- hclust(dist(tokvecs), method = "average")
ddata <- dendro_data(as.dendrogram(hc))
library(shiny); library(shinythemes)
library(readr); library(dplyr); library(purrr); library(forcats)
library(ggplot2); library(plotly); library(misc3d)
library(RcppCNPy); library(rjson)
library(ggdendro)
#clouds <- read_tsv("church.tsv")
# models <- read_tsv("church.models.tsv")
#clouds <- read_tsv("old.favorite.cloud.tsv")
clouds <- read_tsv("new.favorite.cloud.tsv")
legendmap <- read_tsv("legendmap.tsv")
dist <- "nocomp.10_10_nvj_nobound.noweight.1.s.5k_all.5_5.ttmx.dist.pac"
temp <- unzip(dist, unzip="internal")
tokvecs <- npyLoad(temp[2])
metadata <- fromJSON(file = temp[1])
dimid2item <- metadata$'row_items'
dimnames(tokvecs) <- list(dimid2item, dimid2item)
file.remove(temp[1], temp[2])
library(tidyverse)
setwd("../xampp/htdocs/GitHub/delhikiev.github.io/")
models <- read_tsv('church.models.tsv')
nrow(models)
count(models, sentbound)
models <- models %>% filter(sentbound == 'nobound') %>% select(-sentbound)
models <- models %>% select(-weight, -compounds)
models
models %>% count(tokleft, tokright)
models %>% mutate(token_window = unite(tokleft, tokright, sep=":"))
models %>% mutate(token_window = unite(as.character(tokleft), as.character(tokright), sep=":"))
?unite
models %>% unite(token_window, c(tokleft, tokright), sep = ":")
models %>% unite(token_window, c(tokleft, tokright), sep = ":") %>% unite(socc_window, c(soccleft, soccright), sep= ":")
models <- models %>% unite(token_window, c(tokleft, tokright), sep = ":") %>% unite(socc_window, c(soccleft, soccright), sep= ":")
models %>% mutate(tokpos = toupper(tokpos))
models %>% mutate(tokpos = toupper(tokpos), socccorpus = fct_recode(socccorpus, "COHA" = "c", "Semcor" = "s"))
models %>% mutate(tokpos = toupper(tokpos), socccorpus = fct_recode(socccorpus, "COHA" = "c", "Semcor" = "s")) %>% write_tsv("church.models.tsv")
nrow(models)
colnames(models)
count(models, token_window)
count(models, tokpos)
count(models, mincws)
count(models, socccorpus)
## Working directory should be the dir with isoMDS solutions
models <- read_tsv("church.models.tsv")
models %>% count(socclength)
cloud <- read_tsv("church.tsv")
subcloud <- cloud %>% dplyr::select(`_id`, starts_with('nocomp'))
files.names <- models$model
newmat <- files.names
n <- length(files.names)
newmat <- expand.grid(files.names, files.names)
newmat <- as.matrix(newmat)
nrow(models)
## Reads list of tokens that are in the intersection of all models
subcloud <- subcloud %>% mutate(n = (rowSums(subcloud != 0)-1)/2) %>%
filter(n == max(n))
sub <- dplyr::select(subcloud, -`_id`, -n) %>% data.frame()
rnset <- subcloud$`_id`
row.names(sub) <- rnset
#rnset <- read.table("tokenIDs.txt", header=F)
rnset <- as.matrix(rnset)
res <- c()
## Procrustes analysis
for (i in 1:nrow(newmat)) {
tryCatch({
mat1 <- sub[c(paste0(newmat[i, 1], '.x'), paste0(newmat[i, 1], '.y'))]
mat2 <- sub[c(paste0(newmat[i, 2], '.x'), paste0(newmat[i, 2], '.y'))]
res[i] <- procrustes(mat1, mat2, symmetric = T)$ss
# res[i] <- procrustes(read.table(newmat[i,1], header=T, row.names=1, sep="\t")[rnset, ], read.table(newmat[i,2], header=T, row.names=1, sep="\t")[rnset, ], symmetric=T)$ss
}, error = function(e) {
res[i] <- NA
print(paste0(newmat[i,1], " ", newmat[i,2]))
})
}
## Convert to similarity matrix
res <- matrix(res, nrow=n)
library(MASS)
library(vegan)
res
## Procrustes analysis
for (i in 1:nrow(newmat)) {
tryCatch({
mat1 <- sub[c(paste0(newmat[i, 1], '.x'), paste0(newmat[i, 1], '.y'))]
mat2 <- sub[c(paste0(newmat[i, 2], '.x'), paste0(newmat[i, 2], '.y'))]
res[i] <- procrustes(mat1, mat2, symmetric = T)$ss
# res[i] <- procrustes(read.table(newmat[i,1], header=T, row.names=1, sep="\t")[rnset, ], read.table(newmat[i,2], header=T, row.names=1, sep="\t")[rnset, ], symmetric=T)$ss
}, error = function(e) {
res[i] <- NA
print(paste0(newmat[i,1], " ", newmat[i,2]))
})
}
## Convert to similarity matrix
res <- matrix(res, nrow=n)
# convertednames <- gsub("(*)\\.ttmx\\.k2\\.points\\.txt", "\\1", files.names)
rownames(res) <- files.names
colnames(res) <- files.names
## Apply repeatedisoMDS
wwmx <- res
if (wwmx[1,1] > 0) { wwmx <- max(wwmx) - wwmx }
wwmx[wwmx <= 0] <- 0.0000001
for (i in 1:dim(wwmx)[1]) {
wwmx[i, i] <- 0
}
dst <- as.dist(wwmx)
#     dst.isoMDS2 <- isoMDS(dst, y=initMDS(dst), k=k, ...)
#     if (dst.isoMDS2$stress < dst.isoMDS$stress) {
#       dst.isoMDS <- dst.isoMDS2
#     }
#   }
#   return(dst.isoMDS)
# }
#
# k <- 2
# dst.isoMDS <- repeatedIsoMDS(dst, k=k)
dst.MDS <- metaMDS(dst, k = 2, trymax = 30)
stress <- dst.MDS$stress
stress
models
models <- models %>% select(-model.x, -model.y)
models <- models %>% dplyr::select(-model.x, -model.y)
models
# add coords to models' file
models.w.coords <- dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble %>%
setNames(., c('model', 'model.x', 'model.y')) %>%
left_join(models, by = 'model')
models.w.coords
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socccorpus)))
models.w.coords %>% write_tsv('church.models.tsv')
models.w.coords
colnames(models)
str(models)
count(models, socclength_group)
nrow(models.w.coords)
count(models, socccorpus)
count(models, tokpos)
count(models, tokpos, token_window)
library(MASS)
library(vegan)
library(tidyverse)
## Working directory should be the dir with isoMDS solutions
setwd("Aug01/")
models <- read_tsv("church.models.tsv")
cloud <- read_tsv("church.tsv")
models
models
models <- read_tsv("church.models.tsv")
models
cloud
length(colnames(cloud))
length(colnames(cloud)[endsWith(colnames(cluod), '.x')])
length(colnames(cloud)[endsWith(colnames(cloud), '.x')])
length(colnames(cloud)[endsWith(colnames(cloud), '.y')])
goodnames <- colnames(cloud)[endsWith(colnames(cloud), '.x')]
badnames <- colnames(cloud)[endsWith(colnames(cloud), '.y')]
length(goodnames)
length(badnames)
goodnames[1:5]
badnames[1:5]
cloud <- cloud %>% select(-badnames)
length(colnames(cloud))
nrow(models)
cloud2 <- cloud
colnames(cloud2)
cloud2 %>% rename_all(~str_replace(., '.x.x', '.x')) %>% colnames
cloud2 %>% rename_all(~str_replace(., '.x\\$', '')) %>% colnames
cloud2 %>% rename_all(~str_replace(., '.x.x', '.x')) %>% rename_all(~str_replace(., '.y.x', '.y')) %>% colnames()
cloud <- cloud %>% rename_all(~str_replace(., '.x.x', '.x')) %>% rename_all(~str_replace(., '.y.x', '.y'))
cloud %>% rename_if((ends_with('noweight')|ends_with('ppmi')|starts_with('raw')|starts_with('cues')), ~str_c('_', .,)) %>% colnames()
cloud %>% select(ends_with('noweight'))
cloud %>% select((ends_with('noweight')|ends_with('ppmi')))
cloud %>% rename_if(ends_with('noweight'), ~str_c('_', .,)) %>% colnames()
cloud %>% rename_at(vars(ends_with('noweight')), ~str_c('_', .,)) %>% colnames()
cloud %>% rename_at(vars(ends_with('noweight')), function(x) paste('_', x)) %>% colnames()
cloud %>% rename_at(vars(ends_with('noweight')), function(x) paste0('_', x)) %>% colnames()
cloud %>% rename_at(vars(ends_with('noweight')|ends_with('ppmi')), function(x) paste0('_', x)) %>% colnames()
cloud %>% rename_at(vars(ends_with('noweight'), ends_with('ppmi')), function(x) paste0('_', x)) %>% colnames()
cloud %>% rename_at(vars(ends_with('noweight'), ends_with('ppmi'), starts_with('raw')), function(x) paste0('_', x)) %>% colnames()
cloud %>% rename_at(vars(ends_with('noweight'), ends_with('ppmi'), starts_with('raw'), starts_with('cues')), function(x) paste0('_', x)) %>% colnames()
cloud <- cloud %>% rename_at(vars(ends_with('noweight'), ends_with('ppmi'), starts_with('raw'), starts_with('cues')), function(x) paste0('_', x))
cloud %>% write_tsv('church.tsv')
subcloud <- cloud %>% dplyr::select(`_id`, ends_with('.x'), ends_with('.y')))
subcloud <- cloud %>% dplyr::select(`_id`, ends_with('.x'), ends_with('.y'))
length(colnames(subcloud))
(length(colnames(subcloud))-1)/2
files.names <- models$`_model`
files.names
newmat <- files.names
n <- length(files.names)
newmat <- expand.grid(files.names, files.names)
newmat <- as.matrix(newmat)
## Reads list of tokens that are in the intersection of all models
subcloud <- subcloud %>% mutate(n = (rowSums(subcloud != 0)-1)/2) %>%
filter(n == max(n))
sub <- dplyr::select(subcloud, -`_id`, -n) %>% data.frame()
length(colnames(subcloud))/2
length(colnames(sub))/2
rnset <- subcloud$`_id`
row.names(sub) <- rnset
#rnset <- read.table("tokenIDs.txt", header=F)
rnset <- as.matrix(rnset)
res <- c()
## Procrustes analysis
for (i in 1:nrow(newmat)) {
tryCatch({
mat1 <- sub[c(paste0(newmat[i, 1], '.x'), paste0(newmat[i, 1], '.y'))]
mat2 <- sub[c(paste0(newmat[i, 2], '.x'), paste0(newmat[i, 2], '.y'))]
res[i] <- procrustes(mat1, mat2, symmetric = T)$ss
# res[i] <- procrustes(read.table(newmat[i,1], header=T, row.names=1, sep="\t")[rnset, ], read.table(newmat[i,2], header=T, row.names=1, sep="\t")[rnset, ], symmetric=T)$ss
}, error = function(e) {
res[i] <- NA
print(paste0(newmat[i,1], " ", newmat[i,2]))
})
}
## Convert to similarity matrix
res <- matrix(res, nrow=n)
# convertednames <- gsub("(*)\\.ttmx\\.k2\\.points\\.txt", "\\1", files.names)
rownames(res) <- files.names
colnames(res) <- files.names
res[1:3, 1:3]
## Apply repeatedisoMDS
wwmx <- res
if (wwmx[1,1] > 0) { wwmx <- max(wwmx) - wwmx }
wwmx[wwmx <= 0] <- 0.0000001
for (i in 1:dim(wwmx)[1]) {
wwmx[i, i] <- 0
}
dst <- as.dist(wwmx)
#     dst.isoMDS2 <- isoMDS(dst, y=initMDS(dst), k=k, ...)
#     if (dst.isoMDS2$stress < dst.isoMDS$stress) {
#       dst.isoMDS <- dst.isoMDS2
#     }
#   }
#   return(dst.isoMDS)
# }
#
# k <- 2
# dst.isoMDS <- repeatedIsoMDS(dst, k=k)
dst.MDS <- metaMDS(dst, k = 2, trymax = 30)
stress <- dst.MDS$stress
# add coords to models' file
models.w.coords <- dst.MDS$points %>% as.data.frame %>% rownames_to_column %>% as_tibble %>%
setNames(., c('_model', 'model.x', 'model.y')) %>%
left_join(models, by = '_model')
models.w.coords
min(models.w.coords$model.x)
max(models.w.coords$model.x)
max(models.w.coords$model.y)
min(models.w.coords$model.y)
colnames(models.w.coords)
dplyr::count(models.w.coords, minimum_contextwords)
dplyr::count(models.w.coords, socc_corpus)
dplyr::count(models.w.coords, type)
dplyr::count(models.w.coords, part_of_speech)
dplyr::count(models.w.coords, socc_length)
library(ggplot2)
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(part_of_speech)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(minimum_contextwords)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socc_corpus)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(token_window)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(weighting)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socc_length)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socc_corpus)))
ggplot(models.w.coords) +
geom_point(aes(x = model.x, y = model.y, color = factor(socc_window)))
models.w.coords %>% write_tsv('church.models.tsv')
clouds %>% select(-starts_with('church'))
clouds
cloud %>% select(-starts_with('church'))
models.w.coords %>% select(-ends_with('.x'), -ends_with('.y'))
models.w.coords %>% select(-ends_with('.x'), -ends_with('.y')) %>% colnames
